# Resolver Changelog

### 1.5.0

* Added .container scope that lives for the lifetime of a given Resolver container (PR#131)
* Updated ResolverRegistration to give ResolverOptions the ability to add new behaviors to a given registration (Based on PR#130)
* Updates to ResolverRegistration so external services aren't poking around its internals
* Removed deprecated scopes from Resolver base class.

### 1.4.5

* Resolver.Name conformance to Hashable and Equatable

### 1.4.4

* Reduced code size and improved performance
* Update registration cache key mechanism to prevent possible registration overwrites

### 1.4.3

* Add capability for multiple child containers

### 1.4.2

* Fix threading issue in LazyInjected and WeakLazyInjected property wrappers
* Fix argument passing in .implements
* Update projct for Xcode 12.5
* Update Swift class deprecation  

### 1.4.1

* Fix bug forwarding new argument structure from factory to factory - PR#89

### 1.4.0

* Updated registration and resolution lock/unlock stratagies for better thread safety and performance.
* Updated automatic service registration code for better performance and to use new locking mechanisms.
* Moved default scopes from Resolver to ResolverScope for better autocompletion.
* Added .name(fromString:) to Resolver.Name to handle passing string variables.

### 1.3.0

* Add Name spaces - Based on PR#83
* Fix protocol issue in WeakLazyInjected property wrapper
* Update Resolver.reset to also reset known caches.

### 1.2.1

* Fix autorelease bug in WeakLazyInjected property wrapper

### 1.2

* Rewrite argument passing code to support multiple arguments
* Add @WeakLazyInjected property wrapper
* Update Cyclic Dependencies and Annotation documentation
* Fix to build on Linux - PR#75
* Fix to build dynamically using SPM - PR#71
* Fix issue with hierarchical containers - PR#50
* Add tvOS deployment target for Cocoapods - PR#56

### 1.1.4

* Add Resolver.reset() function to reset Resolver to original state

### 1.1.3

* Add @OptionalInjected property wrapper
* Fixed Empty CURRENT_PROJECT_VERSION variable.
* Mark framework to use application extension safe api only
* Use fatalError message instead of print

### 1.1.2

* Add @InjectedObject property wrapper for SwiftUI support
* Ensure proper initialization of pthread mutexes
* Add missing public keyword to registerAllServices() method
* Expand supported platforms to include macOS, tvOS, and watchOS
* Set minimum supported platform on iOS to iOS 11

### 1.1.1

* Fix project file issue for cocoapod support.

### 1.1.0

* Update project for Swift 5.1 and SPM
* Add @Injected property wrapper for Swift 5.1
* Add @LazyInjected property wrapper for Swift 5.1
* Revise unit tests for more code coverage
* Make static registration function public and add concurrency mutexes
* Add type specification to defaultScope
* Fix initializers on scope types to allow public instantiation.
* Allow clearing the shared cache

### 1.0.8

* Update project settings for Swift 5

### 1.0.7

* Update project settings for Swift 4.2

### 1.0.6

* Fix bug resolving shared protocols
* Add passed resolver option to factories

### 1.0.5

* Value types should not be cached during graph resolution
* Changed registrationsNeeded to performInitialRegistrations closure

### 1.0.4

* Add tests to ensure correct handling of named cached values

### 1.0.3

* Fix issue with caching named instances.

### 1.0.2

* Add debug message to resolve in case of Optionals and ImplicitlyUnrwappedOptionals.

### 1.0.1

* Make ResolverScopeCache initializer visible

### 1.0.0

* Initial Open Source Release
* Initial Cocoapods Release
